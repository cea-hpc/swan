/*******************************************************************************
 * Copyright (c) 2022 CEA
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
module SwanGeo;

with Math.*;
with BathyLib.*;
with CartesianMesh2D.*;

// options
ℝ δt;
ℕ maxIter;
ℝ stopTime;
//Long Lat
ℝ dx;
ℝ dy;

let ℝ δx_lon = dx; // in °
let ℝ δy_lat = dy; // in °
let ℝ DEG2RAD_DP = 0.01745;//acos(-1)/180;
let ℝ DEG2RAD = DEG2RAD_DP;
let ℝ DEG2M_DP = 111194.9266;
let ℝ DEG2M = DEG2M_DP;

ℝ δx{cells};
ℝ δy{cells};
let ℝ g = -9.8;

ℝ t;
ℝ[2] X{nodes};
//ℝ[2] Xc{innerCells};
// Xc valide uniquement sur innerCells !
ℝ[2] Xc{cells};

ℝ U{faces}; // velocity in x direction
ℝ Uini{faces}; 
ℝ Ucalc{faces};

ℝ H{cells}; // wave height above mean water level
ℝ Hini{cells}; //
ℝ Hcalc{cells};

ℝ Hplot{cells};

ℝ Dijini{cells}; // depth ( < 0)
ℝ Dij{cells}; // depth ( < 0)
ℝ Dt{cells};

iterate n while (t^{n+1} < stopTime && n < maxIter);

InitTime: t^{n=0} = 0.0;

InitXc: ∀ic∈cells("InnerCells"),
{
	 Xc{ic}[0] = nextLon();
	 Xc{ic}[1] = nextLat();
}

// init δx and δy on each cell
Initδxδy:
{
	// only OuterCells if the group exists
	∀oc∈cells(), 
	{
		δx{oc} = 3000.0;
		δy{oc} = 3000.0;
	}
	∀ic∈cells("InnerCells"),
	{
		δx{ic} = δx_lon * DEG2M * cos(Xc{ic}[1] * DEG2RAD);
		δy{ic} = δy_lat * DEG2M_DP;
	}
}
// depth initialization
InitDijini: ∀ic∈cells("InnerCells"),Dijini{ic} = nextDepth();

InitDij:
{
	∀tc∈cells("TopCells"),    ∀bc∈bottomCell(tc), Dij^{n=0}{tc} = Dijini{bc};
	∀bc∈cells("BottomCells"), ∀tc∈topCell(bc), Dij^{n=0}{bc} = Dijini{tc}; 
	∀lc∈cells("LeftCells"),   ∀rc∈rightCell(lc), Dij^{n=0}{lc} = Dijini{rc}; 
	∀rc∈cells("RightCells"),  ∀lc∈leftCell(rc), Dij^{n=0}{rc} = Dijini{lc};
	∀ic∈cells("InnerCells"),  Dij^{n=0}{ic} = Dijini{ic}; 
}

IniDt: ∀j∈cells(), Dt^{n=0}{j} = max(H^{n=0}{j},H^{n=0}{j}-Dij^{n=0}{j});

// wave initialization 

InitHini:{∀ic∈cells("InnerCells"),
if (Dij^{n=0}{ic}>0) 
	Hini{ic} = nextWaveHeight() * 0.0;
else
	Hini{ic} = nextWaveHeight();
}

// trick to initialize Boundary Condition on H
InitH:
{
	∀t∈cells("TopCells"), ∀bt∈bottomCell(t), H^{n=0}{t} = Hini{bt};
	∀b∈cells("BottomCells"), ∀tb∈topCell(b), H^{n=0}{b} = Hini{tb};
	∀l∈cells("LeftCells"), ∀rl∈rightCell(l), H^{n=0}{l} = Hini{rl};
	∀r∈cells("RightCells"), ∀lr∈leftCell(r), H^{n=0}{r} = Hini{lr};
	∀ic∈cells("InnerCells"), H^{n=0}{ic} = Hini{ic};
}

InitHcalc:	∀j∈cells(), Hcalc^{n=0}{j}=H^{n=0}{j};

InitUcalc:	∀j∈faces(), Ucalc^{n=0}{j}=U^{n=0}{j};

// x velocity initialization
InitUini: ∀f∈faces("InnerFaces"), Uini{f} = 0.0;

// trick to initialize Boundary Condition on U
InitU:
{
	∀tc∈cells("TopCells"), ∀rf∈rightFaceOfCell(tc), ∀bc∈bottomCell(tc), ∀brf∈rightFaceOfCell(bc),
		U^{n=0}{rf} = Uini{brf};
	∀bc∈cells("BottomCells"), ∀rf∈rightFaceOfCell(bc), ∀tc∈topCell(bc), ∀trf∈rightFaceOfCell(tc),
		U^{n=0}{rf} = Uini{trf};
	∀lc∈cells("LeftCells"), ∀lf∈leftFaceOfCell(lc), ∀rf∈rightFaceOfCell(lc),
		U^{n=0}{lf} = Uini{rf};
	∀rc∈cells("RightCells"), ∀rf∈rightFaceOfCell(rc), ∀lf∈leftFaceOfCell(rc),
		U^{n=0}{rf} = Uini{lf};
}
// compute new wave height using the numerical schema 
UpdateHcalc:∀ic∈cells("InnerCells"), 
{
	let ℝ TD1 = 0.0;
	let ℝ TD2 = 0.0;

	// computeTD1;
	∀ rf ∈ rightFaceOfCell(ic), ∀ rc ∈ rightCell(ic),
		if (U^{n}{rf} <= 0)			
			TD1 =  Dt^{n}{rc};
		else
			TD1 =  Dt^{n}{ic} ;

	// computeTD2;
	∀ lf ∈ leftFaceOfCell(ic),∀ lc ∈ leftCell(ic),
		if( U^{n}{lf} <= 0)
			TD2 =  Dt^{n}{ic} ;
		else
			TD2 = Dt^{n}{lc} ;

	let ℝ TV1 = 0.0;
	let ℝ TV2 = 0.0;
	
	// computeTV1;
	∀ tf ∈ topFaceOfCell(ic), ∀ tc ∈ topCell(ic),
		if (U^{n}{tf} <= 0)			
			TV1 =  Dt^{n}{tc};
		else
			TV1 =  Dt^{n}{ic} ;

	// computeTV2;
	∀ bf ∈ bottomFaceOfCell(ic),∀ bc ∈ bottomCell(ic),
		if( U^{n}{bf} <= 0)
			TV2 =  Dt^{n}{ic} ;
		else
			TV2 = Dt^{n}{bc} ;

	// computeH^{n+1}
	if (Dij^{n+1}{ic}<0)
	∀rf∈rightFaceOfCell(ic), ∀lf∈leftFaceOfCell(ic), ∀ tf ∈ topFaceOfCell(ic), ∀ bf ∈ bottomFaceOfCell(ic),
		Hcalc^{n+1}{ic} = H^{n}{ic} - δt/(δx{ic})*(U^{n}{rf} * TD1  - U^{n}{lf} * TD2) - δt/δy{ic} * (U^{n}{tf} * TV1  - U^{n}{bf} * TV2);
	else
		Hcalc^{n+1}{ic} = 0.0;

}

// update boundary condition for wave height
UpdateHouter:  
{
	∀tc∈cells("TopCells"), ∀bc∈bottomCell(tc),
		H^{n+1}{tc} = Hcalc^{n+1}{bc};
	∀bc∈cells("BottomCells"), ∀tc∈topCell(bc),
		H^{n+1}{bc} = Hcalc^{n+1}{tc};
	∀lc∈cells("LeftCells"), ∀rc∈rightCell(lc),
		H^{n+1}{lc} = Hcalc^{n+1}{rc};
	∀rc∈cells("RightCells"), ∀lc∈leftCell(rc),
		H^{n+1}{rc} = Hcalc^{n+1}{lc};
}

UpdateHinner:∀ic∈cells("InnerCells"), H^{n+1}{ic} = Hcalc^{n+1}{ic};

// compute new x velocity using the numerical schema
UpdateUcalc:∀ic∈cells("InnerCells"),∀rfc∈rightFaceOfCell(ic),∀tfc∈topFaceOfCell(ic), 
{
	//Horizontal
	let ℝ TU1 = 0.0;
	let ℝ TV1 = 0.0;
	let ℝ V1=0.0;

	∀bfc∈bottomFaceOfCell(ic), ∀icp∈rightCell(ic), ∀tfcp∈topFaceOfCell(icp), ∀bfcp∈bottomFaceOfCell(icp), V1= (U^{n}{tfc}+U^{n}{bfc}+U^{n}{tfcp}+U^{n}{bfcp})/4;

	if(V1 <= 0)
		∀ict∈topCell(ic), ∀rfct∈rightFaceOfCell(ict),
			TV1  = U^{n}{rfct} - U^{n}{rfc};
	else
		∀icb∈bottomCell(ic), ∀rfcb∈rightFaceOfCell(icb),
			TV1 = U^{n}{rfc} - U^{n}{rfcb};

	// compute TU1
	if(U^{n}{rfc} <= 0)
		∀icp∈rightCell(ic), ∀rfcp∈rightFaceOfCell(icp),∀lfcp∈leftFaceOfCell(icp),
			TU1  = U^{n}{rfcp} - U^{n}{lfcp};
	else
		∀lfc∈leftFaceOfCell(ic), 
			TU1 = U^{n}{rfc} - U^{n}{lfc};

	// compute U^{n+1}
	∀icp∈rightCell(ic),	Ucalc^{n+1}{rfc} = U^{n}{rfc} - (δt/ δx{ic}) * (U^{n}{rfc} * TU1  - g * (H^{n+1}{icp} - H^{n+1}{ic}) ) - (δt/ δy{ic}) * (V1 * TV1) ;

	//vertical
	let ℝ TV2 = 0.0;
	let ℝ TU2 = 0.0;
	let ℝ U1=0.0;

	∀lfc∈leftFaceOfCell(ic), ∀ict∈topCell(ic), ∀rfct∈rightFaceOfCell(ict), ∀lfct∈leftFaceOfCell(ict), U1= (U^{n}{rfc}+U^{n}{lfc}+U^{n}{rfct}+U^{n}{lfct})/4;

	if(U1 <= 0)
		∀icp∈rightCell(ic), ∀tfcp∈topFaceOfCell(icp),
			TU2  = U^{n}{tfcp} - U^{n}{tfc};
	else
		∀icm∈leftCell(ic), ∀tfcm∈topFaceOfCell(icm),
			TU2 = U^{n}{tfc} - U^{n}{tfcm};

	// compute TV2
	if(U^{n}{tfc} <= 0)
		∀icp∈topCell(ic), ∀tfcp∈topFaceOfCell(icp),∀bfcp∈bottomFaceOfCell(icp),
			TV2  = U^{n}{tfcp} - U^{n}{bfcp};
	else
		∀bfc∈bottomFaceOfCell(ic), 
			TV2 = U^{n}{tfc} - U^{n}{bfc};

	// compute V^{n+1} 
	∀icp∈topCell(ic), Ucalc^{n+1}{tfc} = U^{n}{tfc} - (δt/ δy{ic}) * (U^{n}{tfc} * TV2  - g * (H^{n+1}{icp} - H^{n+1}{ic}) ) - (δt/ δx{ic}) * (U1 * TU2) ;

}

// update boundary condition for x velocity
UpdateUouter:
{
	// Update U
	∀tc∈cells("TopCells"), ∀rf∈rightFaceOfCell(tc), ∀bc∈bottomCell(tc), ∀brf∈rightFaceOfCell(bc),
		U^{n+1}{rf} = Ucalc^{n+1}{brf};
	∀bc∈cells("BottomCells"), ∀rf∈rightFaceOfCell(bc), ∀bcf∈topCell(bc), ∀trf∈rightFaceOfCell(bcf),
		U^{n+1}{rf} = Ucalc^{n+1}{trf};
	∀lc∈cells("LeftCells"), ∀lf∈leftFaceOfCell(lc), ∀rf∈rightFaceOfCell(lc),
		U^{n+1}{lf} = Ucalc^{n+1}{rf};
	∀rc∈cells("RightCells"), ∀rf∈rightFaceOfCell(rc), ∀lf∈leftFaceOfCell(rc),
		U^{n+1}{rf} = Ucalc^{n+1}{lf};
	// Update V
	∀tc∈cells("TopCells"), ∀bf∈bottomFaceOfCell(tc), ∀tf∈topFaceOfCell(tc),
		U^{n+1}{tf} = U^{n}{bf};
	∀bc∈cells("BottomCells"), ∀bf∈bottomFaceOfCell(bc), ∀tf∈topFaceOfCell(bc),
		U^{n+1}{bf} = U^{n}{tf} ;
	∀lc∈cells("LeftCells"), ∀bf∈bottomFaceOfCell(lc), ∀rc∈rightCell(lc), ∀bfrc∈bottomFaceOfCell(rc),
		U^{n+1}{bf} = U^{n}{bfrc};
	∀rc∈cells("RightCells"), ∀bf∈bottomFaceOfCell(rc), ∀lc∈leftCell(rc), ∀bflc∈bottomFaceOfCell(lc),
		U^{n+1}{bf} = U^{n}{bflc};
}


UpdateHplot:{ ∀j∈cells(),if (Dij^{n+1}{j}<0) Hplot^{n+1}{j}=Hcalc^{n+1}{j}; 
						else Hplot^{n+1}{j}=Dij^{n+1}{j};
}

UpdateUinner: ∀ic∈faces(), U^{n+1}{ic} = Ucalc^{n+1}{ic};

UpdateDtot:∀j∈cells(), Dt^{n+1}{j} = max(-Dij^{n+1}{j}+Hcalc^{n+1}{j},0.0);

UpdateDij:∀j∈cells(), Dij^{n+1}{j}=Dij^{n}{j};

ComputeTn: t^{n+1} = t^{n} + δt;