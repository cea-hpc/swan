module Swan;

with Math.*;
with BathyLib.*;
with CartesianMesh2D.*;

// options
option ℝ X_EDGE_LENGTH = 20.0;
option ℝ Y_EDGE_LENGTH = 20.0;
option ℾ loadBathy = true;
option ℝ Dini = -1000.0;
option ℝ Dup = -1000.0;
option ℝ δt = 0.5;
option ℕ maxIter = 5000000;
option ℝ stopTime = 20.0;
//Wave option
option ℾ loadWave = true;
option ℕ waveMode = 3;
option ℝ LX=200.0;
option ℝ X0 = 50.0;
option ℝ Y0 = 50.0;
option ℝ Amp = 0.1;
option ℝ Sigma = 5000.0;

let ℝ δx = X_EDGE_LENGTH;
let ℝ δy = Y_EDGE_LENGTH;
let ℝ g = -9.8;
option ℝ epsh = 0.01;
option ℝ epsu = 0.000001;

ℝ[2] center{cells};
ℝ t;
ℝ[2] X{nodes};

ℝ U{faces};// velocity in x direction
ℝ Uini{faces}; 
ℝ Ucalc{faces};
ℝ Urn{faces};

ℝ H{cells};// wave height above mean water level
ℝ Hini{cells}; //
ℝ Hcalc{cells};
ℝ Hru{cells};
 
ℝ Dijini{cells};// depth ( < 0)
ℝ Dij{cells};// depth ( < 0)
ℝ Dt{cells};

iterate n while (t^{n+1} < stopTime && n < maxIter);

InitTime: t^{n=0} = 0.0;

// depth initialization
InitDijini: ∀ic∈innerCells(), 
	if (loadBathy) 
		Dijini{ic} = nextDepth();
	else
		Dijini{ic} = Dini + center{ic}[0]*(Dup-Dini)/(LX);

InitDij:
{
	∀tc∈topCells(), ∀bc∈bottomCell(tc), Dij^{n=0}{tc} = Dijini{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc), Dij^{n=0}{bc} = Dijini{tc};
	∀lc∈leftCells(), ∀rc∈rightCell(lc), Dij^{n=0}{lc} = Dijini{rc};
	∀rc∈rightCells(), ∀lc∈leftCell(rc), Dij^{n=0}{rc} = Dijini{lc};
	∀ic∈innerCells(), Dij^{n=0}{ic} = Dijini{ic}; 
}

//MPO -> pour avoir X meme aux mailles de bord...
//IniCenter: ∀j∈innerCells(), center{j} =(0.25*∑{r∈nodesOfCell(j)}(X{r}));
IniCenter: ∀j∈cells(), center{j} =(0.25*∑{r∈nodesOfCell(j)}(X{r}));

IniDt: ∀j∈innerCells(), Dt^{n=0}{j} = max(-Dij^{n=0}{j}+Hcalc^{n=0}{j},0.0);

// wave initialization 

InitHini: ∀ic∈innerCells(),
	if (loadWave)
		Hini{ic} = nextWaveHeight();
	else if (waveMode==1)
	{
		if (center{ic}[0] < X0) 
			Hini{ic} = Amp;
		else
			Hini{ic} = 0.0;
	}
	else if (waveMode==2)
		Hini{ic} = Amp*exp(-0.5*(center{ic}[0]-X0)*(center{ic}[0]-X0)/(Sigma*Sigma))*exp(-0.5*(center{ic}[1]-Y0)*(center{ic}[1]-Y0)/(Sigma*Sigma));
	else if (waveMode==3)
		Hini{ic} = Amp*exp(-0.5*(center{ic}[0]-X0)*(center{ic}[0]-X0)/(Sigma*Sigma));
	else if (waveMode==4)
	{
		if(center{ic}[0]<(X0/2.0)) 
			Hini{ic} =Amp * sin(center{ic}[0]*(2*3.1415/X0));
		else
			Hini{ic} = 0.0;
	}

// trick to initialize Boundary Condition on H
InitH:
{
	∀t∈topCells(), ∀bt∈bottomCell(t), H^{n=0}{t} = Hini{bt};
	∀b∈bottomCells(), ∀tb∈topCell(b), H^{n=0}{b} = Hini{tb};
	∀l∈leftCells(), ∀rl∈rightCell(l), H^{n=0}{l} = Hini{rl};
	∀r∈rightCells(), ∀lr∈leftCell(r), H^{n=0}{r} = Hini{lr};
	∀ic∈innerCells(), H^{n=0}{ic} = Hini{ic};
}

InitHcalc: ∀j∈cells(), Hcalc^{n=0}{j}=H^{n=0}{j};

IniHru: ∀ic∈innerCells(), Hru^{n=0}{ic} = max(Hcalc^{n=0}{ic},Dij^{n=0}{ic});

InitUcalc: ∀j∈faces(), Ucalc^{n=0}{j}=U^{n=0}{j};

// x velocity initialization
InitUini: ∀f∈innerFaces(), Uini{f} = 0.0;

// trick to initialize Boundary Condition on U
InitU:
{
	∀tc∈topCells(), ∀rf∈rightFaceOfCell(tc), ∀bc∈bottomCell(tc), ∀brf∈rightFaceOfCell(bc),
		U^{n=0}{rf} = Uini{brf};
	∀bc∈bottomCells(), ∀rf∈rightFaceOfCell(bc), ∀tc∈topCell(bc), ∀trf∈rightFaceOfCell(tc),
		U^{n=0}{rf} = Uini{trf};
	∀lc∈leftCells(), ∀lf∈leftFaceOfCell(lc), ∀rf∈rightFaceOfCell(lc),
		U^{n=0}{lf} = Uini{rf};
	∀rc∈rightCells(), ∀rf∈rightFaceOfCell(rc), ∀lf∈leftFaceOfCell(rc),
		U^{n=0}{rf} = Uini{lf};
}

// compute new wave height using the numerical schema 
UpdateHcalc: ∀ic∈innerCells(),
{
	let ℝ TD1 = 0.0;
	let ℝ TD2 = 0.0;

	// computeTD1;
	∀rf∈rightFaceOfCell(ic), ∀rc∈rightCell(ic),
		if (U^{n}{rf} <= 0)
			TD1 = Dt^{n}{rc};
		else
			TD1 = Dt^{n}{ic};

	// computeTD2;
	∀lf∈leftFaceOfCell(ic), ∀lc∈leftCell(ic),
		if (U^{n}{lf} <= 0)
			TD2 = Dt^{n}{ic};
		else
			TD2 = Dt^{n}{lc};
			
	let ℝ TV1 = 0.0;
	let ℝ TV2 = 0.0;

	// computeTV1;
	∀tf∈topFaceOfCell(ic), ∀tc∈topCell(ic),
		if (U^{n}{tf} <= 0)
			TV1 = Dt^{n}{tc};
		else
			TV1 = Dt^{n}{ic};

	// computeTV2;
	∀bf∈bottomFaceOfCell(ic), ∀bc∈bottomCell(ic),
		if (U^{n}{bf} <= 0)
			TV2 = Dt^{n}{ic};
		else
			TV2 = Dt^{n}{bc};

	// computeH^{n+1}
	∀rf∈rightFaceOfCell(ic), ∀lf∈leftFaceOfCell(ic), ∀tf∈topFaceOfCell(ic), ∀bf∈bottomFaceOfCell(ic),
		Hcalc^{n+1}{ic} = H^{n}{ic}-δt/(δx)*(U^{n}{rf}*TD1-U^{n}{lf}*TD2)-δt/δy*(U^{n}{tf}*TV1-U^{n}{bf}*TV2);
}

// update boundary condition for wave height
UpdateHouter:
{
	∀tc∈topCells(), ∀bc∈bottomCell(tc),
		H^{n+1}{tc} = Hru^{n+1}{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc),
		H^{n+1}{bc} = Hru^{n+1}{tc};
	∀lc∈leftCells(), ∀rc∈rightCell(lc),
		H^{n+1}{lc} = Hru^{n+1}{rc};
	∀rc∈rightCells(), ∀lc∈leftCell(rc),
		H^{n+1}{rc} = Hru^{n+1}{lc};
}

UpdateHinner: ∀ic∈innerCells(), H^{n+1}{ic} = Hru^{n+1}{ic};

UpdateHru: ∀ic∈innerCells(), Hru^{n+1}{ic} = max(Hcalc^{n+1}{ic},Dij^{n+1}{ic});

// compute new x velocity using the numerical schema
UpdateUcalc: ∀ic∈innerCells(),∀rfc∈rightFaceOfCell(ic),∀tfc∈topFaceOfCell(ic),
{
	//Horizontal
	let ℝ TU1 = 0.0;
	let ℝ TV1 = 0.0;
	let ℝ V1 = 0.0;

	∀bfc∈bottomFaceOfCell(ic), ∀icp∈rightCell(ic), ∀tfcp∈topFaceOfCell(icp), ∀bfcp∈bottomFaceOfCell(icp), V1= (U^{n}{tfc}+U^{n}{bfc}+U^{n}{tfcp}+U^{n}{bfcp})/4;

	if(V1 <= 0)
		∀ict∈topCell(ic), ∀rfct∈rightFaceOfCell(ict),
			TV1 = U^{n}{rfct}-U^{n}{rfc};
	else
		∀icb∈bottomCell(ic), ∀rfcb∈rightFaceOfCell(icb),
			TV1 = U^{n}{rfc}-U^{n}{rfcb};

	// compute TU1
	if(U^{n}{rfc} <= 0)
		∀icp∈rightCell(ic), ∀rfcp∈rightFaceOfCell(icp),∀lfcp∈leftFaceOfCell(icp),
			TU1 = U^{n}{rfcp}-U^{n}{lfcp};
	else
		∀lfc∈leftFaceOfCell(ic),
			TU1 = U^{n}{rfc}-U^{n}{lfc};

	// compute U^{n+1}
	∀icp∈rightCell(ic), Ucalc^{n+1}{rfc} = U^{n}{rfc}-(δt/ δx)*(U^{n}{rfc}*TU1-g*(H^{n+1}{icp}-H^{n+1}{ic}))-(δt/δy)*(V1*TV1);

	//vertical
	let ℝ TV2 = 0.0;
	let ℝ TU2 = 0.0;
	let ℝ U1 = 0.0;

	∀lfc∈leftFaceOfCell(ic), ∀ict∈topCell(ic), ∀rfct∈rightFaceOfCell(ict), ∀lfct∈leftFaceOfCell(ict), U1= (U^{n}{rfc}+U^{n}{lfc}+U^{n}{rfct}+U^{n}{lfct})/4;

	if(U1 <= 0)
		∀icp∈rightCell(ic), ∀tfcp∈topFaceOfCell(icp),
			TU2 = U^{n}{tfcp}-U^{n}{tfc};
	else
		∀icm∈leftCell(ic), ∀tfcm∈topFaceOfCell(icm),
			TU2 = U^{n}{tfc}-U^{n}{tfcm};

	// compute TV2
	if(U^{n}{tfc} <= 0)
		∀icp∈topCell(ic), ∀tfcp∈topFaceOfCell(icp),∀bfcp∈bottomFaceOfCell(icp),
			TV2 = U^{n}{tfcp}-U^{n}{bfcp};
	else
		∀bfc∈bottomFaceOfCell(ic), 
			TV2 = U^{n}{tfc}-U^{n}{bfc};

	// compute V^{n+1} 
	∀icp∈topCell(ic), Ucalc^{n+1}{tfc} = U^{n}{tfc}-(δt/δy)*(U^{n}{tfc}*TV2-g*(H^{n+1}{icp}-H^{n+1}{ic}))-(δt/δx)*(U1*TU2);
}

// update boundary condition for x velocity
UpdateUouter:
{
	∀tc∈topCells(), ∀rf∈rightFaceOfCell(tc), ∀bc∈bottomCell(tc), ∀brf∈rightFaceOfCell(bc),
		U^{n+1}{rf} = Urn^{n+1}{brf};
	∀bc∈bottomCells(), ∀rf∈rightFaceOfCell(bc), ∀bcf∈topCell(bc), ∀trf∈rightFaceOfCell(bcf),
		U^{n+1}{rf} = Urn^{n+1}{trf};
	∀lc∈leftCells(), ∀lf∈leftFaceOfCell(lc), ∀rf∈rightFaceOfCell(lc),
		U^{n+1}{lf} = Urn^{n+1}{rf};
	∀rc∈rightCells(), ∀rf∈rightFaceOfCell(rc), ∀lf∈leftFaceOfCell(rc),
		U^{n+1}{rf} = Urn^{n+1}{lf};
}

UpdateUinner: ∀ic∈innerFaces(), U^{n+1}{ic} = Urn^{n+1}{ic};

UpdateUrunup:
{//run-up
	∀ic∈innerCells(), ∀rfc∈rightFaceOfCell(ic),
	if ((Dt^{n+1}{ic} < epsh))
		Urn^{n+1}{rfc} = 0.0;
	else 
		Urn^{n+1}{rfc} = Ucalc^{n+1}{rfc};
	∀ic∈innerCells(), ∀lfc∈rightFaceOfCell(ic),
	if ((Dt^{n+1}{ic} < epsh))
		Urn^{n+1}{lfc} = 0.0;
	else 
		Urn^{n+1}{lfc} = Ucalc^{n+1}{lfc};
	∀ic∈innerCells(), ∀tfc∈topFaceOfCell(ic),
	if ((Dt^{n+1}{ic} < epsh))
		Urn^{n+1}{tfc} = 0.0;
	else 
		Urn^{n+1}{tfc} = Ucalc^{n+1}{tfc};
	∀ic∈innerCells(), ∀bfc∈bottomFaceOfCell(ic),
	if ((Dt^{n+1}{ic} < epsh))
		Urn^{n+1}{bfc} = 0.0;
	else 
		Urn^{n+1}{bfc} = Ucalc^{n+1}{bfc};
		
	//right	
	∀ic∈innerCells(), ∀icp∈rightCell(ic), ∀icm∈leftCell(ic), ∀lfc∈leftFaceOfCell(ic), ∀rfc∈rightFaceOfCell(ic), ∀rfcm∈rightFaceOfCell(icm),
	if ((Dt^{n+1}{ic} > epsh) && (Dt^{n+1}{icp} < epsh) && (Ucalc^{n+1}{lfc} > epsu) && (H^{n+1}{ic} > H^{n}{icp}+epsh))
		Urn^{n+1}{rfc} = Ucalc^{n+1}{rfcm};
	//left
	∀ic∈innerCells(), ∀icm∈leftCell(ic), ∀lfc∈leftFaceOfCell(ic), ∀rfc∈rightFaceOfCell(ic),
	if ((Dt^{n+1}{ic} > epsh) && (Dt^{n+1}{icm} < epsh) && (Ucalc^{n+1}{rfc} < -1*epsu) && (H^{n+1}{ic} > H^{n}{icm}+epsh))
		Urn^{n+1}{lfc} = Ucalc^{n+1}{rfc};
	//up	
	∀ic∈innerCells(), ∀ict∈topCell(ic), ∀tfc∈topFaceOfCell(ic), ∀bfc∈bottomFaceOfCell(ic),
	if ((Dt^{n+1}{ic} > epsh) && (Dt^{n+1}{ict} < epsh) && (Ucalc^{n+1}{bfc} > epsu) && (H^{n+1}{ic} > H^{n}{ict}+epsh))
		Urn^{n+1}{tfc}=Ucalc^{n+1}{bfc};
	//bottom
	∀ic∈innerCells(), ∀icb∈bottomCell(ic), ∀tfc∈topFaceOfCell(ic), ∀bfc∈bottomFaceOfCell(ic),
	if ((Dt^{n+1}{ic} > epsh) && (Dt^{n+1}{icb} < epsh) && (Ucalc^{n+1}{tfc} < -1*epsu) && (H^{n+1}{ic} > H^{n}{icb}+epsh))
		Urn^{n+1}{bfc} = Ucalc^{n+1}{tfc};
}

UpdateDtot: ∀j∈innerCells(), Dt^{n+1}{j} = max(-Dij^{n+1}{j}+Hru^{n+1}{j},0.0);

UpdateDij: ∀j∈cells(), Dij^{n+1}{j}=Dij^{n}{j};

ComputeTn: t^{n+1} = t^{n} + δt;