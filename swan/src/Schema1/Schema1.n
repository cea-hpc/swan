module Schema1;

with Math.*;
with BathyLib.*;
with LinearAlgebra.*;
with CartesianMesh2D.*;

// options
option ℝ X_EDGE_LENGTH = 20.0;
option ℝ Y_EDGE_LENGTH = 20.0;
option ℝ δt = 0.5;
option ℕ maxIter = 5000000;
option ℝ stopTime = 20.0;


ℝ[2] X{nodes};
//Wave option
option ℾ loadWave = true;
option ℕ waveMode = 3;
option ℝ X0 = 50.0;
option ℝ Y0 = 50.0;
option ℝ Amp = 0.1;
option ℝ Sigma=5000.0;



option ℾ loadBathy = true;
option ℝ LX=200.0;
option ℝ Dini = -1000.0;
option ℝ Dup = -1000.0;



let ℝ δx = X_EDGE_LENGTH;
let ℝ g = - 9.8;

ℝ[2] center{cells};
ℝ t;
ℝ U{cells}; // velocity in x direction

ℝ H{cells}; // wave height above mean water level
ℝ Hcalc{cells};
ℝ Hini{cells}; //

ℝ A{cells, cells};
ℝ B{cells};


ℝ Mcalc{cells};
ℝ M{cells};
ℝ Mm{cells}; //Variable pour utiliser M^{n-1}


ℝ Dijini{cells}; // depth ( < 0)
ℝ Dij{cells}; // depth ( < 0)
ℝ Dt{cells}; // 

iterate n while (t^{n+1} < stopTime && n < maxIter);

InitTime: t^{n=0} = 0.0;


IniCenter: ∀j∈cells(), center{j} =(0.25 * ∑{r∈nodesOfCell(j)}(X{r}));
// wave initialization 

InitHini:{ ∀ic∈innerCells(),
	if(center{ic}[0]<(X0/2.0) && center{ic}[0]>δx)
		Hini{ic} =Amp * sin(center{ic}[0]*(2*3.1415/X0));
	else
			Hini{ic} = 0.0;
}

// trick to initialize Boundary Condition on H
InitH:
{
	∀t∈topCells(), ∀bt∈bottomCell(t), H^{n=0}{t} = Hini{bt};
	∀b∈bottomCells(), ∀tb∈topCell(b), H^{n=0}{b} = Hini{tb};
	∀l∈leftCells(), ∀rl∈rightCell(l), H^{n=0}{l} = Hini{rl};
	∀r∈rightCells(), ∀lr∈leftCell(r), H^{n=0}{r} = Hini{lr};
	∀ic∈innerCells(), H^{n=0}{ic} = Hini{ic};
}

// depth initialization
InitDijini: ∀ic∈innerCells(), 
	if(loadBathy) 
		Dijini{ic} = nextDepth();
	else
		Dijini{ic} = Dini + center{ic}[0]*(Dup-Dini)/(LX);

InitDij:
{
	∀tc∈topCells(),    ∀bc∈bottomCell(tc), Dij{tc} = Dijini{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc), Dij{bc} = Dijini{tc}; 
	∀lc∈leftCells(),   ∀rc∈rightCell(lc), Dij{lc} = Dijini{rc}; 
	∀rc∈rightCells(),  ∀lc∈leftCell(rc), Dij{rc} = Dijini{lc};
	∀ic∈innerCells(),  Dij{ic} = Dijini{ic}; 
}
InitDt: ∀ic∈cells(),Dt^{n=0}{ic} = Dini+H^{n=0}{ic};

InitU: ∀ic∈cells(), U^{n=0}{ic}=0.0;

InitM: ∀ic∈cells(), M^{n=0}{ic} = (H^{n=0}{ic} - Dij{ic}) * U^{n=0}{ic}; 
InitMm: ∀ic∈cells(), Mm^{n=0}{ic} = (H^{n=0}{ic} - Dij{ic}) * U^{n=0}{ic}; 



IniA:{
	∀ic∈innerCells(),	A{ic,ic}= 2*(Dij{ic}*Dij{ic}/(3*δx*δx))+1;
	∀ic∈innerCells(), ∀ip∈rightCell(ic),	A{ic,ip}= - Dij{ic}*Dij{ic}/(3*δx*δx);
	∀ic∈innerCells(), ∀im∈leftCell(ic), 	A{ic,im}= - Dij{ic}*Dij{ic}/(3*δx*δx);
}



IniB:{
	∀ic∈innerCells(), ∀ip∈rightCell(ic), ∀im∈leftCell(ic), B^{n=0}{ic}= M^{n=0}{ic} + g*(δt/δx)*((Dt^{n=0}{ic}+Dt^{n=0}{ip})/2)*(H^{n=0}{ip}-H^{n=0}{ic}) - Dij{ic}*Dij{ic}/(3*δx*δx) *(Mm^{n=0}{im}-2*Mm^{n=0}{ic}+Mm^{n=0}{ip});
}

UpdateB:{
	∀ic∈innerCells(), ∀ip∈rightCell(ic), ∀im∈leftCell(ic), B^{n+1}{ic}= M^{n}{ic} + g*(δt/δx)*((Dt^{n}{ic}+Dt^{n}{ip})/2)*(H^{n}{ip}-H^{n}{ic}) - Dij{ic}*Dij{ic}/(3*δx*δx) *(Mm^{n}{im}-2*Mm^{n}{ic}+Mm^{n}{ip});
}



UpdateM:{
	Mcalc^{n+1}=solveLinearSystem(A, B^{n+1});
}

UpdateMm:∀ic∈cells(), Mm^{n+1}{ic}=M^{n}{ic};


UpdateH:{
	∀ic∈innerCells(), ∀im∈leftCell(ic), Hcalc^{n+1}{ic}=H^{n}{ic}-(δt/δx)*(M^{n+1}{ic}-M^{n+1}{im});
}

UpdateHouter:  
{
	∀tc∈topCells(), ∀bc∈bottomCell(tc),
		H^{n+1}{tc} = Hcalc^{n+1}{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc),
		H^{n+1}{bc} = Hcalc^{n+1}{tc};
	∀lc∈leftCells(), ∀rc∈rightCell(lc),
		H^{n+1}{lc} = Hcalc^{n+1}{rc};
	∀rc∈rightCells(), ∀lc∈leftCell(rc),
		H^{n+1}{rc} = Hcalc^{n+1}{lc};
}

UpdateHinner:∀ic∈innerCells(),  H^{n+1}{ic} = Hcalc^{n+1}{ic};	



UpdateMouter:  
{
	∀tc∈topCells(), ∀bc∈bottomCell(tc),
		M^{n+1}{tc} = Mcalc^{n+1}{bc};
	∀bc∈bottomCells(), ∀tc∈topCell(bc),
		M^{n+1}{bc} = Mcalc^{n+1}{tc};
	∀lc∈leftCells(), ∀rc∈rightCell(lc),
		M^{n+1}{lc} = Mcalc^{n+1}{rc};
	∀rc∈rightCells(), ∀lc∈leftCell(rc),
		M^{n+1}{rc} = Mcalc^{n+1}{lc};
}

UpdateMinner:∀ic∈innerCells(),  M^{n+1}{ic} = Mcalc^{n+1}{ic};	

UpdateDt: ∀ic∈cells(),Dt^{n+1}{ic} = -Dini + H^{n+1}{ic};

ComputeTn: t^{n+1} = t^{n} + δt;