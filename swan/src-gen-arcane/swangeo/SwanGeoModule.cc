/* DO NOT EDIT THIS FILE - it is machine generated */

#include "SwanGeoModule.h"
#include <arcane/Concurrency.h>
#include <arcane/ITimeLoopMng.h>

using namespace Arcane;

/*** Module/Service **********************************************************/

SwanGeoModule::SwanGeoModule(const ModuleBuildInfo& bi)
: ArcaneSwanGeoObject(bi)
{}

void SwanGeoModule::init()
{
	// initialization of mesh attributes
	m_mesh = CartesianMesh2D::createInstance(mesh());

	// initialization of other attributes
	m_lastDump = numeric_limits<int>::min();
	m_n = 0;
	m_deltax_lon = options()->dx();
	m_deltay_lat = options()->dy();

	// constant time step
	m_global_deltat = options()->deltat();
	if (options()->bathyLib.isPresent())
		m_bathy_lib.jsonInit(options()->bathyLib.value().localstr());

	// calling jobs
	initDijini(); // @1.0
	initTime(); // @1.0
	initUini(); // @1.0
	initXc(); // @1.0
	initDij(); // @2.0
	initU(); // @2.0
	initdeltaxdeltay(); // @2.0
	initHini(); // @3.0
	initUcalc(); // @3.0
	initH(); // @4.0
	iniDt(); // @5.0
	initHcalc(); // @5.0
	setUpTimeLoopN(); // @6.0
}

/**
 * Job computeTn called @1.0 in executeTimeLoopN method.
 * In variables: deltat, t_n
 * Out variables: t_nplus1
 */
void SwanGeoModule::computeTn()
{
	m_t_nplus1 = m_t_n + options()->deltat();
}

/**
 * Job initDijini called @1.0 in simulate method.
 * In variables: 
 * Out variables: Dijini
 */
void SwanGeoModule::initDijini()
{
	ENUMERATE_CELL(icInnerCells, m_mesh->getGroup("InnerCells"))
	{
		const auto icId(icInnerCells.asItemLocalId());
		const auto icCells(icId);
		m_Dijini[icCells] = m_bathy_lib.nextDepth();
	}
}

/**
 * Job initTime called @1.0 in simulate method.
 * In variables: 
 * Out variables: t_n0
 */
void SwanGeoModule::initTime()
{
	m_t_n0 = 0.0;
}

/**
 * Job initUini called @1.0 in simulate method.
 * In variables: 
 * Out variables: Uini
 */
void SwanGeoModule::initUini()
{
	arcaneParallelForeach(m_mesh->getGroup("InnerFaces"), [&](FaceVectorView view)
	{
		ENUMERATE_FACE(fInnerFaces, view)
		{
			const auto fId(fInnerFaces.asItemLocalId());
			const auto fFaces(fId);
			m_Uini[fFaces] = 0.0;
		}
	});
}

/**
 * Job initXc called @1.0 in simulate method.
 * In variables: 
 * Out variables: Xc
 */
void SwanGeoModule::initXc()
{
	ENUMERATE_CELL(icInnerCells, m_mesh->getGroup("InnerCells"))
	{
		const auto icId(icInnerCells.asItemLocalId());
		const auto icCells(icId);
		m_Xc[icCells][0] = m_bathy_lib.nextLon();
		m_Xc[icCells][1] = m_bathy_lib.nextLat();
	}
}

/**
 * Job updateDij called @1.0 in executeTimeLoopN method.
 * In variables: Dij_n
 * Out variables: Dij_nplus1
 */
void SwanGeoModule::updateDij()
{
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(jCells, view)
		{
			m_Dij_nplus1[jCells] = m_Dij_n[jCells];
		}
	});
}

/**
 * Job initDij called @2.0 in simulate method.
 * In variables: Dijini
 * Out variables: Dij_n0
 */
void SwanGeoModule::initDij()
{
	arcaneParallelForeach(m_mesh->getGroup("TopCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(tcTopCells, view)
		{
			const auto tcId(tcTopCells.asItemLocalId());
			const auto tcCells(tcId);
			const auto bcId(m_mesh->getBottomCell(tcId));
			const auto bcCells(bcId);
			m_Dij_n0[tcCells] = m_Dijini[bcCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("BottomCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(bcBottomCells, view)
		{
			const auto bcId(bcBottomCells.asItemLocalId());
			const auto bcCells(bcId);
			const auto tcId(m_mesh->getTopCell(bcId));
			const auto tcCells(tcId);
			m_Dij_n0[bcCells] = m_Dijini[tcCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("LeftCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(lcLeftCells, view)
		{
			const auto lcId(lcLeftCells.asItemLocalId());
			const auto lcCells(lcId);
			const auto rcId(m_mesh->getRightCell(lcId));
			const auto rcCells(rcId);
			m_Dij_n0[lcCells] = m_Dijini[rcCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("RightCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(rcRightCells, view)
		{
			const auto rcId(rcRightCells.asItemLocalId());
			const auto rcCells(rcId);
			const auto lcId(m_mesh->getLeftCell(rcId));
			const auto lcCells(lcId);
			m_Dij_n0[rcCells] = m_Dijini[lcCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("InnerCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(icInnerCells, view)
		{
			const auto icId(icInnerCells.asItemLocalId());
			const auto icCells(icId);
			m_Dij_n0[icCells] = m_Dijini[icCells];
		}
	});
}

/**
 * Job initU called @2.0 in simulate method.
 * In variables: Uini
 * Out variables: U_n0
 */
void SwanGeoModule::initU()
{
	arcaneParallelForeach(m_mesh->getGroup("TopCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(tcTopCells, view)
		{
			const auto tcId(tcTopCells.asItemLocalId());
			const auto rfId(m_mesh->getRightFaceOfCell(tcId));
			const auto rfFaces(rfId);
			const auto bcId(m_mesh->getBottomCell(tcId));
			const auto brfId(m_mesh->getRightFaceOfCell(bcId));
			const auto brfFaces(brfId);
			m_U_n0[rfFaces] = m_Uini[brfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("BottomCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(bcBottomCells, view)
		{
			const auto bcId(bcBottomCells.asItemLocalId());
			const auto rfId(m_mesh->getRightFaceOfCell(bcId));
			const auto rfFaces(rfId);
			const auto tcId(m_mesh->getTopCell(bcId));
			const auto trfId(m_mesh->getRightFaceOfCell(tcId));
			const auto trfFaces(trfId);
			m_U_n0[rfFaces] = m_Uini[trfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("LeftCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(lcLeftCells, view)
		{
			const auto lcId(lcLeftCells.asItemLocalId());
			const auto lfId(m_mesh->getLeftFaceOfCell(lcId));
			const auto lfFaces(lfId);
			const auto rfId(m_mesh->getRightFaceOfCell(lcId));
			const auto rfFaces(rfId);
			m_U_n0[lfFaces] = m_Uini[rfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("RightCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(rcRightCells, view)
		{
			const auto rcId(rcRightCells.asItemLocalId());
			const auto rfId(m_mesh->getRightFaceOfCell(rcId));
			const auto rfFaces(rfId);
			const auto lfId(m_mesh->getLeftFaceOfCell(rcId));
			const auto lfFaces(lfId);
			m_U_n0[rfFaces] = m_Uini[lfFaces];
		}
	});
}

/**
 * Job initdeltaxdeltay called @2.0 in simulate method.
 * In variables: DEG2M, DEG2M_DP, DEG2RAD, Xc, deltax_lon, deltay_lat
 * Out variables: deltax, deltay
 */
void SwanGeoModule::initdeltaxdeltay()
{
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(ocCells, view)
		{
			m_deltax[ocCells] = 3000.0;
			m_deltay[ocCells] = 3000.0;
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("InnerCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(icInnerCells, view)
		{
			const auto icId(icInnerCells.asItemLocalId());
			const auto icCells(icId);
			m_deltax[icCells] = m_deltax_lon * m_DEG2M * std::cos(m_Xc[icCells][1] * m_DEG2RAD);
			m_deltay[icCells] = m_deltay_lat * m_DEG2M_DP;
		}
	});
}

/**
 * Job updateHcalc called @2.0 in executeTimeLoopN method.
 * In variables: Dij_nplus1, Dt_n, H_n, U_n, deltat, deltax, deltay
 * Out variables: Hcalc_nplus1
 */
void SwanGeoModule::updateHcalc()
{
	arcaneParallelForeach(m_mesh->getGroup("InnerCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(icInnerCells, view)
		{
			const auto icId(icInnerCells.asItemLocalId());
			const auto icCells(icId);
			Real TD1(0.0);
			Real TD2(0.0);
			{
				const auto rfId(m_mesh->getRightFaceOfCell(icId));
				const auto rfFaces(rfId);
				const auto rcId(m_mesh->getRightCell(icId));
				const auto rcCells(rcId);
				if (m_U_n[rfFaces] <= 0) 
					TD1 = m_Dt_n[rcCells];
				else
					TD1 = m_Dt_n[icCells];
			}
			{
				const auto lfId(m_mesh->getLeftFaceOfCell(icId));
				const auto lfFaces(lfId);
				const auto lcId(m_mesh->getLeftCell(icId));
				const auto lcCells(lcId);
				if (m_U_n[lfFaces] <= 0) 
					TD2 = m_Dt_n[icCells];
				else
					TD2 = m_Dt_n[lcCells];
			}
			Real TV1(0.0);
			Real TV2(0.0);
			{
				const auto tfId(m_mesh->getTopFaceOfCell(icId));
				const auto tfFaces(tfId);
				const auto tcId(m_mesh->getTopCell(icId));
				const auto tcCells(tcId);
				if (m_U_n[tfFaces] <= 0) 
					TV1 = m_Dt_n[tcCells];
				else
					TV1 = m_Dt_n[icCells];
			}
			{
				const auto bfId(m_mesh->getBottomFaceOfCell(icId));
				const auto bfFaces(bfId);
				const auto bcId(m_mesh->getBottomCell(icId));
				const auto bcCells(bcId);
				if (m_U_n[bfFaces] <= 0) 
					TV2 = m_Dt_n[icCells];
				else
					TV2 = m_Dt_n[bcCells];
			}
			if (m_Dij_nplus1[icCells] < 0) 
			{
				const auto rfId(m_mesh->getRightFaceOfCell(icId));
				const auto rfFaces(rfId);
				const auto lfId(m_mesh->getLeftFaceOfCell(icId));
				const auto lfFaces(lfId);
				const auto tfId(m_mesh->getTopFaceOfCell(icId));
				const auto tfFaces(tfId);
				const auto bfId(m_mesh->getBottomFaceOfCell(icId));
				const auto bfFaces(bfId);
				m_Hcalc_nplus1[icCells] = m_H_n[icCells] - options()->deltat() / (m_deltax[icCells]) * (m_U_n[rfFaces] * TD1 - m_U_n[lfFaces] * TD2) - options()->deltat() / m_deltay[icCells] * (m_U_n[tfFaces] * TV1 - m_U_n[bfFaces] * TV2);
			}
			else
				m_Hcalc_nplus1[icCells] = 0.0;
		}
	});
}

/**
 * Job initHini called @3.0 in simulate method.
 * In variables: Dij_n0
 * Out variables: Hini
 */
void SwanGeoModule::initHini()
{
	ENUMERATE_CELL(icInnerCells, m_mesh->getGroup("InnerCells"))
	{
		const auto icId(icInnerCells.asItemLocalId());
		const auto icCells(icId);
		if (m_Dij_n0[icCells] > 0) 
			m_Hini[icCells] = m_bathy_lib.nextWaveHeight() * 0.0;
		else
			m_Hini[icCells] = m_bathy_lib.nextWaveHeight();
	}
}

/**
 * Job initUcalc called @3.0 in simulate method.
 * In variables: U_n0
 * Out variables: Ucalc_n0
 */
void SwanGeoModule::initUcalc()
{
	arcaneParallelForeach(allFaces(), [&](FaceVectorView view)
	{
		ENUMERATE_FACE(jFaces, view)
		{
			m_Ucalc_n0[jFaces] = m_U_n0[jFaces];
		}
	});
}

/**
 * Job updateDtot called @3.0 in executeTimeLoopN method.
 * In variables: Dij_nplus1, Hcalc_nplus1
 * Out variables: Dt_nplus1
 */
void SwanGeoModule::updateDtot()
{
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(jCells, view)
		{
			m_Dt_nplus1[jCells] = std::max(-m_Dij_nplus1[jCells] + m_Hcalc_nplus1[jCells], 0.0);
		}
	});
}

/**
 * Job updateHinner called @3.0 in executeTimeLoopN method.
 * In variables: Hcalc_nplus1
 * Out variables: H_nplus1
 */
void SwanGeoModule::updateHinner()
{
	arcaneParallelForeach(m_mesh->getGroup("InnerCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(icInnerCells, view)
		{
			const auto icId(icInnerCells.asItemLocalId());
			const auto icCells(icId);
			m_H_nplus1[icCells] = m_Hcalc_nplus1[icCells];
		}
	});
}

/**
 * Job updateHouter called @3.0 in executeTimeLoopN method.
 * In variables: Hcalc_nplus1
 * Out variables: H_nplus1
 */
void SwanGeoModule::updateHouter()
{
	arcaneParallelForeach(m_mesh->getGroup("TopCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(tcTopCells, view)
		{
			const auto tcId(tcTopCells.asItemLocalId());
			const auto tcCells(tcId);
			const auto bcId(m_mesh->getBottomCell(tcId));
			const auto bcCells(bcId);
			m_H_nplus1[tcCells] = m_Hcalc_nplus1[bcCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("BottomCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(bcBottomCells, view)
		{
			const auto bcId(bcBottomCells.asItemLocalId());
			const auto bcCells(bcId);
			const auto tcId(m_mesh->getTopCell(bcId));
			const auto tcCells(tcId);
			m_H_nplus1[bcCells] = m_Hcalc_nplus1[tcCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("LeftCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(lcLeftCells, view)
		{
			const auto lcId(lcLeftCells.asItemLocalId());
			const auto lcCells(lcId);
			const auto rcId(m_mesh->getRightCell(lcId));
			const auto rcCells(rcId);
			m_H_nplus1[lcCells] = m_Hcalc_nplus1[rcCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("RightCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(rcRightCells, view)
		{
			const auto rcId(rcRightCells.asItemLocalId());
			const auto rcCells(rcId);
			const auto lcId(m_mesh->getLeftCell(rcId));
			const auto lcCells(lcId);
			m_H_nplus1[rcCells] = m_Hcalc_nplus1[lcCells];
		}
	});
}

/**
 * Job updateHplot called @3.0 in executeTimeLoopN method.
 * In variables: Dij_nplus1, Hcalc_nplus1
 * Out variables: Hplot_nplus1
 */
void SwanGeoModule::updateHplot()
{
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(jCells, view)
		{
			if (m_Dij_nplus1[jCells] < 0) 
				m_Hplot_nplus1[jCells] = m_Hcalc_nplus1[jCells];
			else
				m_Hplot_nplus1[jCells] = m_Dij_nplus1[jCells];
		}
	});
}

/**
 * Job initH called @4.0 in simulate method.
 * In variables: Hini
 * Out variables: H_n0
 */
void SwanGeoModule::initH()
{
	arcaneParallelForeach(m_mesh->getGroup("TopCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(tTopCells, view)
		{
			const auto tId(tTopCells.asItemLocalId());
			const auto tCells(tId);
			const auto btId(m_mesh->getBottomCell(tId));
			const auto btCells(btId);
			m_H_n0[tCells] = m_Hini[btCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("BottomCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(bBottomCells, view)
		{
			const auto bId(bBottomCells.asItemLocalId());
			const auto bCells(bId);
			const auto tbId(m_mesh->getTopCell(bId));
			const auto tbCells(tbId);
			m_H_n0[bCells] = m_Hini[tbCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("LeftCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(lLeftCells, view)
		{
			const auto lId(lLeftCells.asItemLocalId());
			const auto lCells(lId);
			const auto rlId(m_mesh->getRightCell(lId));
			const auto rlCells(rlId);
			m_H_n0[lCells] = m_Hini[rlCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("RightCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(rRightCells, view)
		{
			const auto rId(rRightCells.asItemLocalId());
			const auto rCells(rId);
			const auto lrId(m_mesh->getLeftCell(rId));
			const auto lrCells(lrId);
			m_H_n0[rCells] = m_Hini[lrCells];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("InnerCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(icInnerCells, view)
		{
			const auto icId(icInnerCells.asItemLocalId());
			const auto icCells(icId);
			m_H_n0[icCells] = m_Hini[icCells];
		}
	});
}

/**
 * Job updateUcalc called @4.0 in executeTimeLoopN method.
 * In variables: H_nplus1, U_n, deltat, deltax, deltay, g
 * Out variables: Ucalc_nplus1
 */
void SwanGeoModule::updateUcalc()
{
	arcaneParallelForeach(m_mesh->getGroup("InnerCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(icInnerCells, view)
		{
			const auto icId(icInnerCells.asItemLocalId());
			const auto icCells(icId);
			const auto rfcId(m_mesh->getRightFaceOfCell(icId));
			const auto rfcFaces(rfcId);
			const auto tfcId(m_mesh->getTopFaceOfCell(icId));
			const auto tfcFaces(tfcId);
			Real TU1(0.0);
			Real TV1(0.0);
			Real V1(0.0);
			{
				const auto bfcId(m_mesh->getBottomFaceOfCell(icId));
				const auto bfcFaces(bfcId);
				const auto icpId(m_mesh->getRightCell(icId));
				const auto tfcpId(m_mesh->getTopFaceOfCell(icpId));
				const auto tfcpFaces(tfcpId);
				const auto bfcpId(m_mesh->getBottomFaceOfCell(icpId));
				const auto bfcpFaces(bfcpId);
				V1 = (m_U_n[tfcFaces] + m_U_n[bfcFaces] + m_U_n[tfcpFaces] + m_U_n[bfcpFaces]) / 4;
			}
			if (V1 <= 0) 
			{
				const auto ictId(m_mesh->getTopCell(icId));
				const auto rfctId(m_mesh->getRightFaceOfCell(ictId));
				const auto rfctFaces(rfctId);
				TV1 = m_U_n[rfctFaces] - m_U_n[rfcFaces];
			}
			else
			{
				const auto icbId(m_mesh->getBottomCell(icId));
				const auto rfcbId(m_mesh->getRightFaceOfCell(icbId));
				const auto rfcbFaces(rfcbId);
				TV1 = m_U_n[rfcFaces] - m_U_n[rfcbFaces];
			}
			if (m_U_n[rfcFaces] <= 0) 
			{
				const auto icpId(m_mesh->getRightCell(icId));
				const auto rfcpId(m_mesh->getRightFaceOfCell(icpId));
				const auto rfcpFaces(rfcpId);
				const auto lfcpId(m_mesh->getLeftFaceOfCell(icpId));
				const auto lfcpFaces(lfcpId);
				TU1 = m_U_n[rfcpFaces] - m_U_n[lfcpFaces];
			}
			else
			{
				const auto lfcId(m_mesh->getLeftFaceOfCell(icId));
				const auto lfcFaces(lfcId);
				TU1 = m_U_n[rfcFaces] - m_U_n[lfcFaces];
			}
			{
				const auto icpId(m_mesh->getRightCell(icId));
				const auto icpCells(icpId);
				m_Ucalc_nplus1[rfcFaces] = m_U_n[rfcFaces] - (options()->deltat() / m_deltax[icCells]) * (m_U_n[rfcFaces] * TU1 - m_g * (m_H_nplus1[icpCells] - m_H_nplus1[icCells])) - (options()->deltat() / m_deltay[icCells]) * (V1 * TV1);
			}
			Real TV2(0.0);
			Real TU2(0.0);
			Real U1(0.0);
			{
				const auto lfcId(m_mesh->getLeftFaceOfCell(icId));
				const auto lfcFaces(lfcId);
				const auto ictId(m_mesh->getTopCell(icId));
				const auto rfctId(m_mesh->getRightFaceOfCell(ictId));
				const auto rfctFaces(rfctId);
				const auto lfctId(m_mesh->getLeftFaceOfCell(ictId));
				const auto lfctFaces(lfctId);
				U1 = (m_U_n[rfcFaces] + m_U_n[lfcFaces] + m_U_n[rfctFaces] + m_U_n[lfctFaces]) / 4;
			}
			if (U1 <= 0) 
			{
				const auto icpId(m_mesh->getRightCell(icId));
				const auto tfcpId(m_mesh->getTopFaceOfCell(icpId));
				const auto tfcpFaces(tfcpId);
				TU2 = m_U_n[tfcpFaces] - m_U_n[tfcFaces];
			}
			else
			{
				const auto icmId(m_mesh->getLeftCell(icId));
				const auto tfcmId(m_mesh->getTopFaceOfCell(icmId));
				const auto tfcmFaces(tfcmId);
				TU2 = m_U_n[tfcFaces] - m_U_n[tfcmFaces];
			}
			if (m_U_n[tfcFaces] <= 0) 
			{
				const auto icpId(m_mesh->getTopCell(icId));
				const auto tfcpId(m_mesh->getTopFaceOfCell(icpId));
				const auto tfcpFaces(tfcpId);
				const auto bfcpId(m_mesh->getBottomFaceOfCell(icpId));
				const auto bfcpFaces(bfcpId);
				TV2 = m_U_n[tfcpFaces] - m_U_n[bfcpFaces];
			}
			else
			{
				const auto bfcId(m_mesh->getBottomFaceOfCell(icId));
				const auto bfcFaces(bfcId);
				TV2 = m_U_n[tfcFaces] - m_U_n[bfcFaces];
			}
			{
				const auto icpId(m_mesh->getTopCell(icId));
				const auto icpCells(icpId);
				m_Ucalc_nplus1[tfcFaces] = m_U_n[tfcFaces] - (options()->deltat() / m_deltay[icCells]) * (m_U_n[tfcFaces] * TV2 - m_g * (m_H_nplus1[icpCells] - m_H_nplus1[icCells])) - (options()->deltat() / m_deltax[icCells]) * (U1 * TU2);
			}
		}
	});
}

/**
 * Job iniDt called @5.0 in simulate method.
 * In variables: Dij_n0, H_n0
 * Out variables: Dt_n0
 */
void SwanGeoModule::iniDt()
{
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(jCells, view)
		{
			m_Dt_n0[jCells] = std::max(m_H_n0[jCells], m_H_n0[jCells] - m_Dij_n0[jCells]);
		}
	});
}

/**
 * Job initHcalc called @5.0 in simulate method.
 * In variables: H_n0
 * Out variables: Hcalc_n0
 */
void SwanGeoModule::initHcalc()
{
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(jCells, view)
		{
			m_Hcalc_n0[jCells] = m_H_n0[jCells];
		}
	});
}

/**
 * Job updateUinner called @5.0 in executeTimeLoopN method.
 * In variables: Ucalc_nplus1
 * Out variables: U_nplus1
 */
void SwanGeoModule::updateUinner()
{
	arcaneParallelForeach(allFaces(), [&](FaceVectorView view)
	{
		ENUMERATE_FACE(icFaces, view)
		{
			m_U_nplus1[icFaces] = m_Ucalc_nplus1[icFaces];
		}
	});
}

/**
 * Job updateUouter called @5.0 in executeTimeLoopN method.
 * In variables: U_n, Ucalc_nplus1
 * Out variables: U_nplus1
 */
void SwanGeoModule::updateUouter()
{
	arcaneParallelForeach(m_mesh->getGroup("TopCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(tcTopCells, view)
		{
			const auto tcId(tcTopCells.asItemLocalId());
			const auto rfId(m_mesh->getRightFaceOfCell(tcId));
			const auto rfFaces(rfId);
			const auto bcId(m_mesh->getBottomCell(tcId));
			const auto brfId(m_mesh->getRightFaceOfCell(bcId));
			const auto brfFaces(brfId);
			m_U_nplus1[rfFaces] = m_Ucalc_nplus1[brfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("BottomCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(bcBottomCells, view)
		{
			const auto bcId(bcBottomCells.asItemLocalId());
			const auto rfId(m_mesh->getRightFaceOfCell(bcId));
			const auto rfFaces(rfId);
			const auto bcfId(m_mesh->getTopCell(bcId));
			const auto trfId(m_mesh->getRightFaceOfCell(bcfId));
			const auto trfFaces(trfId);
			m_U_nplus1[rfFaces] = m_Ucalc_nplus1[trfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("LeftCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(lcLeftCells, view)
		{
			const auto lcId(lcLeftCells.asItemLocalId());
			const auto lfId(m_mesh->getLeftFaceOfCell(lcId));
			const auto lfFaces(lfId);
			const auto rfId(m_mesh->getRightFaceOfCell(lcId));
			const auto rfFaces(rfId);
			m_U_nplus1[lfFaces] = m_Ucalc_nplus1[rfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("RightCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(rcRightCells, view)
		{
			const auto rcId(rcRightCells.asItemLocalId());
			const auto rfId(m_mesh->getRightFaceOfCell(rcId));
			const auto rfFaces(rfId);
			const auto lfId(m_mesh->getLeftFaceOfCell(rcId));
			const auto lfFaces(lfId);
			m_U_nplus1[rfFaces] = m_Ucalc_nplus1[lfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("TopCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(tcTopCells, view)
		{
			const auto tcId(tcTopCells.asItemLocalId());
			const auto bfId(m_mesh->getBottomFaceOfCell(tcId));
			const auto bfFaces(bfId);
			const auto tfId(m_mesh->getTopFaceOfCell(tcId));
			const auto tfFaces(tfId);
			m_U_nplus1[tfFaces] = m_U_n[bfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("BottomCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(bcBottomCells, view)
		{
			const auto bcId(bcBottomCells.asItemLocalId());
			const auto bfId(m_mesh->getBottomFaceOfCell(bcId));
			const auto bfFaces(bfId);
			const auto tfId(m_mesh->getTopFaceOfCell(bcId));
			const auto tfFaces(tfId);
			m_U_nplus1[bfFaces] = m_U_n[tfFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("LeftCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(lcLeftCells, view)
		{
			const auto lcId(lcLeftCells.asItemLocalId());
			const auto bfId(m_mesh->getBottomFaceOfCell(lcId));
			const auto bfFaces(bfId);
			const auto rcId(m_mesh->getRightCell(lcId));
			const auto bfrcId(m_mesh->getBottomFaceOfCell(rcId));
			const auto bfrcFaces(bfrcId);
			m_U_nplus1[bfFaces] = m_U_n[bfrcFaces];
		}
	});
	arcaneParallelForeach(m_mesh->getGroup("RightCells"), [&](CellVectorView view)
	{
		ENUMERATE_CELL(rcRightCells, view)
		{
			const auto rcId(rcRightCells.asItemLocalId());
			const auto bfId(m_mesh->getBottomFaceOfCell(rcId));
			const auto bfFaces(bfId);
			const auto lcId(m_mesh->getLeftCell(rcId));
			const auto bflcId(m_mesh->getBottomFaceOfCell(lcId));
			const auto bflcFaces(bflcId);
			m_U_nplus1[bfFaces] = m_U_n[bflcFaces];
		}
	});
}

/**
 * Job setUpTimeLoopN called @6.0 in simulate method.
 * In variables: Dij_n0, Dt_n0, H_n0, Hcalc_n0, U_n0, Ucalc_n0, t_n0
 * Out variables: Dij_n, Dt_n, H_n, Hcalc_n, U_n, Ucalc_n, t_n
 */
void SwanGeoModule::setUpTimeLoopN()
{
	m_t_n = m_t_n0;
	arcaneParallelForeach(allFaces(), [&](FaceVectorView view)
	{
		ENUMERATE_FACE(i1Faces, view)
		{
			m_U_n[i1Faces] = m_U_n0[i1Faces];
		}
	});
	arcaneParallelForeach(allFaces(), [&](FaceVectorView view)
	{
		ENUMERATE_FACE(i1Faces, view)
		{
			m_Ucalc_n[i1Faces] = m_Ucalc_n0[i1Faces];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_H_n[i1Cells] = m_H_n0[i1Cells];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_Hcalc_n[i1Cells] = m_Hcalc_n0[i1Cells];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_Dij_n[i1Cells] = m_Dij_n0[i1Cells];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_Dt_n[i1Cells] = m_Dt_n0[i1Cells];
		}
	});
}

/**
 * Job executeTimeLoopN called @7.0 in simulate method.
 * In variables: Dij_n, Dt_n, H_n, Hcalc_n, Hplot_n, U_n, Ucalc_n, lastDump, maxIter, n, outputPeriod, stopTime, t_n, t_nplus1
 * Out variables: Dij_nplus1, Dt_nplus1, H_nplus1, Hcalc_nplus1, Hplot_nplus1, U_nplus1, Ucalc_nplus1, t_nplus1
 */
void SwanGeoModule::executeTimeLoopN()
{
	m_n++;
	computeTn(); // @1.0
	updateDij(); // @1.0
	updateHcalc(); // @2.0
	updateDtot(); // @3.0
	updateHinner(); // @3.0
	updateHouter(); // @3.0
	updateHplot(); // @3.0
	updateUcalc(); // @4.0
	updateUinner(); // @5.0
	updateUouter(); // @5.0
	
	// Evaluate loop condition with variables at time n
	bool continueLoop = (m_t_nplus1 < options()->stopTime() && m_n < options()->maxIter());
	
	m_t_n = m_t_nplus1;
	arcaneParallelForeach(allFaces(), [&](FaceVectorView view)
	{
		ENUMERATE_FACE(i1Faces, view)
		{
			m_U_n[i1Faces] = m_U_nplus1[i1Faces];
		}
	});
	arcaneParallelForeach(allFaces(), [&](FaceVectorView view)
	{
		ENUMERATE_FACE(i1Faces, view)
		{
			m_Ucalc_n[i1Faces] = m_Ucalc_nplus1[i1Faces];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_H_n[i1Cells] = m_H_nplus1[i1Cells];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_Hcalc_n[i1Cells] = m_Hcalc_nplus1[i1Cells];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_Hplot_n[i1Cells] = m_Hplot_nplus1[i1Cells];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_Dij_n[i1Cells] = m_Dij_nplus1[i1Cells];
		}
	});
	arcaneParallelForeach(allCells(), [&](CellVectorView view)
	{
		ENUMERATE_CELL(i1Cells, view)
		{
			m_Dt_n[i1Cells] = m_Dt_nplus1[i1Cells];
		}
	});
	
	if (!continueLoop)
		subDomain()->timeLoopMng()->stopComputeLoop(true);
}

ARCANE_REGISTER_MODULE_SWANGEO(SwanGeoModule);
