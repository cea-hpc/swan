/* DO NOT EDIT THIS FILE - it is machine generated */

#ifndef __SWANMODULE_H_
#define __SWANMODULE_H_

#include <arcane/utils/Array.h>
#include <arcane/datatype/RealArrayVariant.h>
#include <arcane/datatype/RealArray2Variant.h>
#include "Swan_axl.h"
#include "CartesianMesh2D.h"
#include "BathyLib.h"

using namespace Arcane;

/*** Free functions **********************************************************/

namespace swanfreefuncs
{
	RealArrayVariant sumR1(RealArrayVariant a, RealArrayVariant b);
	RealArrayVariant operatorAdd(RealArrayVariant a, RealArrayVariant b);
	RealArrayVariant operatorMult(const Real a, RealArrayVariant b);
}

/*** Module/Service **********************************************************/

class SwanModule
: public ArcaneSwanObject
{
public:
	SwanModule(const ModuleBuildInfo& mbi);
	~SwanModule() {}

	// entry points
	virtual void init() override;
	virtual void executeTimeLoopN() override;

	VersionInfo versionInfo() const override { return VersionInfo(1, 0, 0); }

public:
	// jobs
	virtual void computeTn();
	virtual void iniCenter();
	virtual void initTime();
	virtual void initUini();
	virtual void updateDij();
	virtual void updateHcalc();
	virtual void initDijini();
	virtual void initHini();
	virtual void initU();
	virtual void updateHru();
	virtual void initDij();
	virtual void initH();
	virtual void initUcalc();
	virtual void updateDtot();
	virtual void updateHinner();
	virtual void updateHouter();
	virtual void initHcalc();
	virtual void updateUcalc();
	virtual void iniDt();
	virtual void iniHru();
	virtual void updateUrunup();
	virtual void setUpTimeLoopN();
	virtual void updateUinner();
	virtual void updateUouter();

private:
	// mesh attributes
	CartesianMesh2D* m_mesh;

	// other attributes
	BathyLib m_bathy_lib;
	Int32 m_lastDump;
	Int32 m_n;
	Real m_deltax;
	Real m_deltay;
	static constexpr Real m_g = -9.8;
	Real m_t_n;
	Real m_t_nplus1;
	Real m_t_n0;
};

#endif
